//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;
using PhiMarketing.Entity;
using System.ComponentModel.DataAnnotations;
using Umbraco.Core.Logging;

namespace PhiMarketing.Models
{
    public class Survey
    {
        private PhiMarketingNewEntities db = null;
        public Survey()
        {
            ContactInfo = new ContactInfo();
            Subjects = new List<Subject>();
            Answers = new List<Answer>();
            //Init();
        }
        [Key]
        public int SurveyID { get; set; }
        public string SurveyTitle { get; set; }
        public string SurveyDescription { get; set; }
        public ContactInfo ContactInfo { get; set; }
        public List<Subject> Subjects { get; set; }
        public List<Answer> Answers { get; set; }

        public void Init()
        {
            using (db = new PhiMarketingNewEntities())
            {
                var ls = db.GetSurveyList();
                foreach (Entity.GetSurveyList_Result row in ls)
                {
                    SurveyID = row.SurveyID;
                    SurveyTitle = row.Title;
                    SurveyDescription = row.Description;
                    break;
                }
                InitSubjects(this.Subjects);
                InitAnswers(this.Answers, this.Subjects);
            }
        }

        private void InitSubjects(List<Subject> subjects)
        {
            List<GetSurveySubjects_Result> ls = db.GetSurveySubjects(SurveyID).ToList();
            foreach (Entity.GetSurveySubjects_Result row in ls)
            {
                Subject newSubject = new Subject();
                newSubject.Title = row.Title;
                newSubject.Description = row.Description;
                newSubject.SubjectID = row.SubjectID;
                newSubject.Questions = GetQuestions(newSubject);
                if (newSubject.Questions != null)
                    subjects.Add(newSubject);
            }
            List<Question> questions = GetQuestions(null);
            if (questions != null)
            {
                Subject newSubject = new Subject();
                newSubject.Title = "General Questions";
                newSubject.Questions = questions;
                subjects.Add(newSubject);
            }
        }

        private void InitAnswers(List<Answer> answers, List<Subject> subjects)
        {
            foreach (Subject subject in subjects)
                foreach (Question question in subject.Questions)
                {
                    Answer newAnswer = new Answer();
                    newAnswer.QuestionID = question.QuestionID;
                    newAnswer.SelectedAnswer = null;
                    answers.Add(newAnswer);
                }
        }

        private List<Question> GetQuestions(Subject subject)
        {
            List<Question> questions = new List<Question>();
            List<GetSurveyQuestions_Result> ls = null;
            if (subject == null)
                ls = db.GetSurveyQuestions(SurveyID).Where(g => g.SubjectID == null).OrderBy(s => s.SeqNo).ToList();
            else
                ls = db.GetSurveyQuestions(SurveyID).Where(g => g.SubjectID == subject.SubjectID).OrderBy(s => s.SeqNo).ToList();
            foreach (Entity.GetSurveyQuestions_Result q in ls)
            {
                Question newQuestion = new Question();
                newQuestion.SurveyID = SurveyID;
                newQuestion.SubjectID = q.SubjectID;
                newQuestion.QuestionID = q.QuestionID;
                newQuestion.QuestionText = q.QuestionText;
                newQuestion.AnswerType = q.AnswerType;
                newQuestion.PossibleAnswers = GetAnswers(newQuestion);
                if (newQuestion.PossibleAnswers != null)
                {
                    if (newQuestion.PossibleAnswers.Count == 1)
                        newQuestion.PossibleAnswers[0].Selected = false;
                    questions.Add(newQuestion);
                }
            }
            return (questions.Count > 0)? questions: null;
        }

        private List<PossibleAnswer> GetAnswers(Question question)
        {
            List<PossibleAnswer> possibleAnswers = new List<PossibleAnswer>();
            var ls = db.GetSurveyPossibleAnswers(SurveyID).Where(g => g.QuestionID == question.QuestionID).OrderBy(s => s.SeqNo);
            foreach (Entity.GetSurveyPossibleAnswers_Result a in ls)
            {
                PossibleAnswer newAnswer = new PossibleAnswer();
                newAnswer.AnswerID = a.AnswerID;
                newAnswer.QuestionID = a.QuestionID;
                newAnswer.SeqNo = a.SeqNo;
                newAnswer.AnswerText = a.AnswerText;
                possibleAnswers.Add(newAnswer);
            }
             return (possibleAnswers.Count > 0) ? possibleAnswers : null; ;
        }

        public bool CollectAnswers(Survey survey)
        {
            using (PhiMarketingNewEntities context = new PhiMarketingNewEntities())
            {
                using (var dbTransaction = context.Database.BeginTransaction())
                {
                    try
                    {
                        Phi_SurveyResponse response = context.Phi_SurveyResponse.Create();
                        response.SurveyID = survey.SurveyID;
                        response.Company = this.ContactInfo.Company;
                        response.FullName = this.ContactInfo.FullName;
                        response.Email = this.ContactInfo.Email;
                        response.Completed = true;
                        response.LastUpdatedOn = DateTime.Now;
                        context.Phi_SurveyResponse.Add(response);
                        context.SaveChanges();
                        int i = 0;
                        foreach (Subject subject in survey.Subjects)
                        {
                            foreach (Question question in subject.Questions)
                            {
                                Answer answer = this.Answers[i++];
                                Phi_ResponseAnswer responseAnswer = context.Phi_ResponseAnswer.Create();
                                responseAnswer.ResponseID = response.ResponseID;
                                responseAnswer.QuestionID = question.QuestionID;
                                responseAnswer.SelectedAnswer = (int)answer.SelectedAnswer;
                                responseAnswer.AnswerText = answer.AnswerText;
                                context.Phi_ResponseAnswer.Add(responseAnswer);
                            }
                        }
                        context.SaveChanges();
                        dbTransaction.Commit();
                        return true;
                    }
                    catch (Exception ex)
                    {
                        dbTransaction.Rollback();
                        LogHelper.Error(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType, "Saving to database Error", ex);
                        return false;
                    }
                }
            }
        }
    }

    public class PossibleAnswer
    {
        [Key]
        public int AnswerID { get; set; }
        public int QuestionID { get; set; }
        public int SeqNo { get; set; }
        public Nullable<Boolean> Selected { get; set; }
        public string AnswerText { get; set; }
    }
    public class Subject
    {
        public int SubjectID { get; set; }
        public string Title { get; set; }
        public string Description { get; set; }
        public List<Question> Questions;
    }
    public class Question
    {
        public int QuestionID { get; set; }
        public int SurveyID { get; set; }
        public Nullable<int> SubjectID { get; set; }
        public string QuestionText { get; set; }
        public string AnswerType { get; set; }
        public List<PossibleAnswer> PossibleAnswers { get; set; }
        public string AnswerText { get; set; }
    }

    public class Answer
    {
        public int QuestionID { get; set; }
        public bool Selected
        {
            get { return SelectedAnswer == 1; }
            set
            {
                if (value)
                    SelectedAnswer = 1;
                else
                    SelectedAnswer = 0;
            }
        }
        [Required(ErrorMessage = "Please select an answer")]
        public Nullable<int> SelectedAnswer { get; set; }
        public string AnswerText { get; set; }
    }

    public class ContactInfo
    {
        [Required(ErrorMessage = "Please provide your full name")]
        public string FullName { get; set; }
        [Required(ErrorMessage = "Please enter company name")]
        public string Company { get; set; }
        [Display(Name = "Email address")]
        [Required(ErrorMessage = "Please provide contact email address")]
        [EmailAddress(ErrorMessage = "Invalid Email Address")]
        public string Email { get; set; }
    }

}
